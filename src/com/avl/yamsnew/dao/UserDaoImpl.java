package com.avl.yamsnew.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import static com.avl.yamsnew.dao.DAOUtil.*;

import com.avl.yamsnew.beans.UserBean;


public class UserDaoImpl implements UserDao{
	
	private DAOFactory daoFactory;
	
	private static final String SQL_INSERT = "INSERT INTO User "
			+ "(username, password, registration_date) VALUES ( ?, ?, NOW())";
	
	private static final String SQL_SELECT_BY_USERNAME = 
			  "SELECT id, username, password, registration_date"
			+ " FROM User WHERE username = ?";
	
	private static final String SQL_UPDATE = "UPDATE User SET "
			+ "username = ?, password = ?, "
			+ "WHERE id = ?";
	
	private static final String SQL_DELETE = "DELETE FROM User WHERE id = ?";
	
	
	
	UserDaoImpl ( DAOFactory daoFactory ){
		this.daoFactory = daoFactory;
	}

	@Override
	public void create(UserBean user) throws DAOException {
		
		Connection connection = null;
	    PreparedStatement preparedStatement = null;
	    ResultSet autoGeneratedValues = null;

	    try {
	        connection = daoFactory.getConnection();
	        preparedStatement = initPreparedRequest( connection, SQL_INSERT, true, user.getUsername(), user.getPassword() );
	        int status = preparedStatement.executeUpdate();
	        
	        if ( status == 0 ) {
	            throw new DAOException( "Fail to create user, no row added." );
	        }
	        
	        autoGeneratedValues = preparedStatement.getGeneratedKeys();
	        if ( autoGeneratedValues.next() ) {
	            user.setId( autoGeneratedValues.getLong( 1 ) );
	        } else {
	            throw new DAOException( "Fail to create user in database, no auto-generated ID returned." );
	        }
	    } catch ( SQLException e ) {
	        throw new DAOException( e );
	    } finally {
	        close( autoGeneratedValues, preparedStatement, connection );
	    }
		
	}
	

	@Override
	public UserBean read(String username) throws DAOException {
		Connection connection = null;
	    PreparedStatement preparedStatement = null;
	    ResultSet resultSet = null;
	    UserBean user = null;

	    try {
	        connection = daoFactory.getConnection();
        	preparedStatement = initPreparedRequest( connection, SQL_SELECT_BY_USERNAME, false, username);
	        
	        resultSet = preparedStatement.executeQuery();
	        
	        if ( resultSet.next() ) {
	            user = map( resultSet );
	        }
	        
	    } catch ( SQLException e ) {
	        throw new DAOException( e );
	    } finally {
	        close( resultSet, preparedStatement, connection );
	    }

	    return user;
	}

	
	@Override
	public void update(UserBean user) throws DAOException {
		
		Connection connection = null;
	    PreparedStatement preparedStatement = null;

	    try {
	        connection = daoFactory.getConnection();
	        preparedStatement = initPreparedRequest( 
	        		connection, SQL_UPDATE, true, 
	        		user.getUsername(), user.getPassword(), user.getId());
	        int status = preparedStatement.executeUpdate();
	        
	        if ( status == 0 ) {
	            throw new DAOException( "Fail to update user." );
	        }
	    } catch ( SQLException e ) {
	        throw new DAOException( e );
	    } finally {
	        close( preparedStatement, connection );
	    }
	}
	

	@Override
	public void delete(UserBean user) throws DAOException {
		
		Connection connection = null;
	    PreparedStatement preparedStatement = null;

	    try {
	        connection = daoFactory.getConnection();
	        preparedStatement = initPreparedRequest( connection, SQL_DELETE, true, user.getId());
	        int status = preparedStatement.executeUpdate();
	        
	        if ( status == 0 ) {
	            throw new DAOException( "Fail to delete user." );
	        }
	    } catch ( SQLException e ) {
	        throw new DAOException( e );
	    } finally {
	        close( preparedStatement, connection );
	    }
		
	}
	
	
	
	private static UserBean map( ResultSet resultSet ) throws SQLException {
		
		UserBean user = new UserBean();
		
	    user.setId( resultSet.getLong( "id" ) );
	    user.setUsername( resultSet.getString( "username" ) );
	    user.setPassword( resultSet.getString( "password" ) );
	    user.setRegistrationDate( resultSet.getTimestamp( "registration_date" ) );
	    
		return user;
	}

}
